#!/usr/bin/env python
"""
Basically a control mux that allows different authorities
to request control and pass commands
"""
import rospy
from geometry_msgs.msg import PointStamped, PoseArray, Pose
from std_msgs.msg import UInt8, Bool, String, Float32
from sensor_msgs.msg import Joy
from mmpug_msgs.msg import ConvoyPositionArray, NavigateStairRequest, NavigateStairResponse
import time

class CommandSource():
    def __init__(self, name, control_interface):
        self.joystick_sub = rospy.Subscriber("%s/command/joy"%name, Joy, control_interface.joyCallback, name)
        self.waypoint_sub = rospy.Subscriber("%s/command/waypoints"%name, PoseArray, control_interface.waypointCallback, name)
        self.state_sub = rospy.Subscriber("%s/command/mode"%name, UInt8, control_interface.stateCallback, name)
        self.arm_sub = rospy.Subscriber("%s/command/arm"%name, Bool, control_interface.armCallback, name)
        self.t_speed_sub = rospy.Subscriber("/%s/command/target_speed"%name, Float32, control_interface.targetSpeedCallback, name)
        self.comms_speed_ratio_sub = rospy.Subscriber("%s/command/speed_ratio"%name, Float32, control_interface.speedRatioCallback, name)
        self.explore_sub = rospy.Subscriber("%s/command/enable_exploration"%name, Bool, control_interface.exploreCallback, name)
        self.convoy_pos_sub = rospy.Subscriber("/%s/command/convoy_pos_array"%name, ConvoyPositionArray, control_interface.convoyposeCallback, name)
        self.convoy_switch_sub = rospy.Subscriber("/%s/command/convoy_switch"%name, Bool, control_interface.convoyswitchCallback, name)
        self.convoy_reordered_sub = rospy.Subscriber("/%s/command/convoy_reordered"%name, Bool, control_interface.convoychangeCallback, name)
        self.convoy_waypoint_sub = rospy.Subscriber("%s/command/convoy_waypoint"%name, Pose, control_interface.convoyWaypointCallback, name)
        self.convoy_formup_sub = rospy.Subscriber("/%s/command/convoy_formup_switch"%name, Bool, control_interface.convoyformupCallback, name)
        self.turn_around_sub = rospy.Subscriber("%s/command/turn_around"%name, Bool, control_interface.turnAroundCallback, name)
        self.get_out_sub = rospy.Subscriber("%s/command/get_out"%name, Bool, control_interface.getOutCallback, name)
        self.slam_fail_sub = rospy.Subscriber("%s/command/slam_fail"%name, Bool, control_interface.slamFailCallback, name)
        self.slam_safe_sub = rospy.Subscriber("%s/command/slam_safe_mode"%name, Bool, control_interface.slamSafeCallback, name)
        self.lock_status_sub = rospy.Subscriber("%s/command/lock_status"%name, Bool, control_interface.lock_statusCallback, name)
        self.connection_stream_sub = rospy.Subscriber("/%s/connection_stream"%name, Bool, control_interface.connectionCallback, name)
        self.go_home_sub = rospy.Subscriber("%s/command/go_home"%name, UInt8, control_interface.goHomeCallback, name)
        self.radio_command_sub = rospy.Subscriber("%s/radio_command"%name, UInt8, control_interface.radio_commandCallback, name)
        self.stair_command_sub = rospy.Subscriber("/%s/stair_controller/request"%name, NavigateStairRequest, control_interface.stairCommandCallback, name)
        self.stair_feedback_pub = rospy.Publisher("/%s/stair_controller/response"%name, NavigateStairResponse, queue_size=1)
        self.stair_feedback_sub = rospy.Subscriber("stair_controller/response", NavigateStairResponse, control_interface.stairFeedbackCallback, (name, self.stair_feedback_pub))
        
class CommandInterface():
    def __init__(self):
        self.system_id = rospy.get_param("~system_id", "payload")
        self.control_sources = {}
        self.control_source = None
        self.lock_status = False
        self.connection_msg_time = 0.0
        self.request_auth_time = 0.0
        # Short names to display command authority -- should be same as in robot interface
        self.auth_name_to_display_code = {"mmpug_bst001" : "bst-01 ", "mmpug_bst002" : "bst-02 ", "mmpug_bst003" : "bst-03 ", "Unknown" : "Unknown", "None" : "None   "}

        self.authority_sub = rospy.Subscriber("command/request_authority", String, self.authorityCallback)
        self.current_authority_pub = rospy.Publisher("command/authority", String, queue_size=1)

        self.joy_pub = rospy.Publisher("executive/command/joy", Joy, queue_size=1)
        self.wp_pub = rospy.Publisher("executive/command/waypoints", PoseArray, queue_size=1)
        self.state_pub = rospy.Publisher("executive/command/mode", UInt8, queue_size=1)
        self.arm_pub = rospy.Publisher("executive/command/arm", Bool, queue_size=1)
        self.t_speed_pub = rospy.Publisher("executive/command/target_speed", Float32, queue_size=1)
        self.explore_pub = rospy.Publisher("executive/command/enable_exploration", Bool, queue_size=1)
        self.convoy_pose_pub = rospy.Publisher("convoy_interface/convoy_pos_array", ConvoyPositionArray, queue_size=1)
        self.convoy_switch_pub = rospy.Publisher("convoy_interface/convoy_switch", Bool, queue_size=1)
        self.convoy_reordered_pub = rospy.Publisher("convoy_interface/convoy_reordered", Bool, queue_size=1)
        self.cwp_pub = rospy.Publisher("convoy_interface/convoy_waypoint", Pose, queue_size=1)
        self.convoy_formup_pub = rospy.Publisher("convoy_interface/convoy_formup_switch", Bool, queue_size=1)
        self.turn_around_pub = rospy.Publisher("executive/turn_around", Bool, queue_size=1)
        self.get_out_pub = rospy.Publisher("executive/get_out", Bool, queue_size=1)
        self.slam_fail_pub = rospy.Publisher("imu_imitate/slam_fail", Bool, queue_size=1)
        self.slam_safe_pub = rospy.Publisher("executive/command/slam_safe", Bool, queue_size=1)
        self.comms_speed_ratio_pub = rospy.Publisher("executive/command/comms_speed_ratio", Float32, queue_size=1)
        self.radio_command_pub = rospy.Publisher("radio_command", UInt8, queue_size=1)
        self.lock_status_pub = rospy.Publisher("executive/locked", Bool, queue_size=1)
        self.failed_authority_pub = rospy.Publisher("executive/failed_authority", String, queue_size=1)
        self.stair_command_pub = rospy.Publisher("stair_controller/request", NavigateStairRequest, queue_size=1)
        self.go_home_pub = rospy.Publisher("executive/command/go_home", UInt8, queue_size=1)    

    def run(self):
        r = rospy.Rate(10)
        
        while not rospy.is_shutdown():
            
            self.publishAuthorityAndLockStatus()
            rospy.loginfo_throttle(5, "Current command authority: " + str(self.control_source))
            self.check_timeout()
            
            r.sleep()

    def publishAuthorityAndLockStatus(self):
        
        current_source_msg = String()
        current_source_msg.data = "None" if self.control_source is None else self.control_source
        
        lock_status_msg = Bool()
        lock_status_msg.data = self.lock_status
               
        self.lock_status_pub.publish(lock_status_msg)
        self.current_authority_pub.publish(current_source_msg)
 
        
    def authorityCallback(self, message):
        new_source = message.data
        if new_source not in self.control_sources:
            self.control_sources[new_source] = CommandSource(new_source, self)
            
        if new_source != self.control_source:   

            if self.lock_status == False:
                self.control_source = new_source
                
            else:
                if time.time() - self.request_auth_time > 5.0:
                    self.request_auth_time = time.time()
                    self.failed_authority_pub.publish(String(new_source))
                    rospy.logwarn("Rejecting command authority request")
            
    def joyCallback(self, joy_msg, source):
        if source != self.control_source:
            return
        self.joy_pub.publish(joy_msg)

    def waypointCallback(self, waypoint_msg, source):
        if source != self.control_source:
            return
        self.wp_pub.publish(waypoint_msg)

    def stateCallback(self, state_msg, source):
        if source != self.control_source:
            return
        self.state_pub.publish(state_msg)

    def armCallback(self, arm_msg, source):
        if source != self.control_source:
            return
        self.arm_pub.publish(arm_msg)
    
    def targetSpeedCallback(self, speed_msg, source):
        if source != self.control_source:
            return
        speed_msg_new = Float32()
        speed_msg_new.data = speed_msg.data
        self.t_speed_pub.publish(speed_msg_new)

    def speedRatioCallback(self, speed_ratio_msg, source):
        if source != self.control_source:
            return
        ratio_msg = Float32()
        ratio_msg.data = speed_ratio_msg.data
        self.comms_speed_ratio_pub.publish(ratio_msg)

    def exploreCallback(self, explore_msg, source):
        if source != self.control_source:
            return
        self.explore_pub.publish(explore_msg)

    def convoyposeCallback(self, convoy_msg, source):
        if source != self.control_source:
            return
        self.convoy_pose_pub.publish(convoy_msg)

    def convoyswitchCallback(self, convoy_msg, source):
        if source != self.control_source:
            return
        self.convoy_switch_pub.publish(convoy_msg)

    def convoychangeCallback(self, convoy_msg, source):
        if source != self.control_source:
            return
        self.convoy_reordered_pub.publish(convoy_msg)

    def convoyWaypointCallback(self, waypoint_msg, source):
        if source != self.control_source:
            return
        self.cwp_pub.publish(waypoint_msg)

    def convoyformupCallback(self, convoy_msg, source):
        if source != self.control_source:
            return
        self.convoy_formup_pub.publish(convoy_msg)

    def turnAroundCallback(self, convoy_msg, source):
        if source != self.control_source:
            return
        self.turn_around_pub.publish(convoy_msg)

    def getOutCallback(self, convoy_msg, source):
        if source != self.control_source:
            return
        self.get_out_pub.publish(convoy_msg)

    def slamFailCallback(self, slam_msg, source):
        if source != self.control_source:
            return
        self.slam_fail_pub.publish(slam_msg)
    
    def slamSafeCallback(self, slam_msg, source):
        if source != self.control_source:
            return
        self.slam_safe_pub.publish(slam_msg)
        
    def lock_statusCallback(self, lock_status_msg, source):
        if source != self.control_source:
            return
        if(self.lock_status != lock_status_msg.data):
            self.lock_status = lock_status_msg.data

        rospy.loginfo("Lock status changed to: "+ str(self.lock_status))

    def radio_commandCallback(self, msg, source):
        if source != self.control_source:
            return
        self.radio_command_pub.publish(msg)
        
    def stairCommandCallback(self, msg, source):
        if source != self.control_source:
            return
        self.stair_command_pub.publish(msg)
    
    def goHomeCallback(self, msg, source):
        if source != self.control_source:
            return
        self.go_home_pub.publish(msg)
        
    def stairFeedbackCallback(self, msg, object):
        if object[0] != self.control_source:
            return
        object[1].publish(msg)

    def connectionCallback(self, connection_msg, source):
        if source!= self.control_source:
            return
        self.connection_msg_time = time.time()

    def check_timeout(self):
        time_diff = time.time() - self.connection_msg_time
        if time_diff > 10:
            self.lock_status = False

if __name__ == "__main__":
    rospy.init_node("command_interface")
    node = CommandInterface()
    node.run()