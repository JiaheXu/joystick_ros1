#!/usr/bin/env python
"""
Inputs a Joy messages and produces controls
that match the control_interface
"""
import rospy
import time
import math
from geometry_msgs.msg import PointStamped
from std_msgs.msg import UInt8, Bool, String
from sensor_msgs.msg import Joy
from mmpug_msgs.msg import MMPUGModes

class JoystickCommandSource():
    def __init__(self):
        # Axes for control
        self.joystick_x_idx = rospy.get_param("~joystick_x_idx", 3)
        self.joystick_y_idx = rospy.get_param("~joystick_y_idx", 0)
        self.joystick_lateral_idx = rospy.get_param("~joystick_lateral_idx", 2)
        self.max_idx = max(
            self.joystick_x_idx,
            self.joystick_y_idx,
            self.joystick_lateral_idx
        )

        # Buttons for control
        self.joystick_button = rospy.get_param("~smart_joysick_button", 2)
        self.exploration_button = rospy.get_param("~exploration_button", 3)
        self.waypoint_button = rospy.get_param("~waypoint_button", 0)
        self.manual_button = rospy.get_param("~manual_button", 1)
        self.arm_disarm_button = rospy.get_param("~arm_disarm_button", 5)
        self.exploration_trigger = rospy.get_param("~exploration_trigger", 3)
        self.control_trigger_button_a = rospy.get_param("~control_trigger_button_a", 6)
        self.control_trigger_button_b = rospy.get_param("~control_trigger_button_b", 7)
        self.max_button = max(
            self.joystick_button,
            self.exploration_button,
            self.waypoint_button,
            self.manual_button,
            self.arm_disarm_button,
            self.exploration_trigger
        )

        self.authority_name = rospy.get_param("~authority_name", "local_joystick")
        self.exploration_trigger_debounce = rospy.get_param("~exploration_trigger_debounce", 5.)

        # Arming
        self.arm_button_pressed = False
        self.system_arm_state_at_press = False
        self.system_armed = False

        # Exploration
        self.exploration_button_pressed = False
        self.exploration_button_press_time = 0.0

        # Input
        self.joystick_sub = rospy.Subscriber("joy", Joy, self.joyCallback)

        # System Feedback
        self.arm_state_sub = rospy.Subscriber("executive/armed", Bool, self.armedCallback)

        # Control Interface
        self.authority_request_pub = rospy.Publisher("command/request_authority", String, queue_size=1)
        self.joystick_pub = rospy.Publisher("%s/command/joy"%self.authority_name, Joy, queue_size=1)
        self.state_pub = rospy.Publisher("%s/command/mode"%self.authority_name, UInt8, queue_size=1)
        self.arm_pub = rospy.Publisher("%s/command/arm"%self.authority_name, Bool, queue_size=1)
        self.explore_pub = rospy.Publisher("%s/command/enable_exploration"%self.authority_name, Bool, queue_size=1)

    def run(self):
        rospy.spin()

    def armedCallback(self, msg):
        self.system_armed = msg.data

    def joyCallback(self, msg):
        bad = False
        if self.max_idx >= len(msg.axes):
            rospy.logerror_throttle(2, "Joystick message does not have enough axes")
            bad = True
        if self.max_button >= len(msg.buttons):
            rospy.logerror_throttle(2, "Joystick message does not have enough buttons")
            bad = True

        if bad:
            return

        joystick = msg.buttons[self.joystick_button]
        exploration = msg.buttons[self.exploration_button]
        waypoint = msg.buttons[self.waypoint_button]
        manual = msg.buttons[self.manual_button]
        arm_disarm = msg.buttons[self.arm_disarm_button]
        exploration_trigger = msg.buttons[self.exploration_trigger]
        control_trigger_a = msg.buttons[self.control_trigger_button_a]
        control_trigger_b = msg.buttons[self.control_trigger_button_b]
        
        joystick_x = msg.axes[self.joystick_x_idx]
        joystick_y = msg.axes[self.joystick_y_idx]
        joystick_lateral = msg.axes[self.joystick_lateral_idx]

        joystick_msg = Joy()
        joystick_msg.axes = [joystick_x, joystick_y, joystick_lateral]
        self.joystick_pub.publish(joystick_msg)

        # Handle the control triggered (to request authority)
        if control_trigger_a and control_trigger_b:
            rospy.loginfo_throttle(1., "Requesting control authority.")
            authority_request_msg = String()
            authority_request_msg.data = self.authority_name
            self.authority_request_pub.publish(authority_request_msg)

        # Handle triggering exploration
        if exploration_trigger:
            if not self.exploration_button_pressed:
                rospy.loginfo("Starting exploration trigger.")
                self.exploration_button_press_time = time.time()
            if math.fabs(time.time() - self.exploration_button_press_time) > self.exploration_trigger_debounce:
                rospy.loginfo_throttle(1., "Triggering exploration")
                exploration_trigger_msg = Bool()
                exploration_trigger_msg.data = True
                self.explore_pub.publish(exploration_trigger_msg)
            self.exploration_button_pressed = True
        else:
            self.exploration_button_pressed = False

        # Handle arming / disarming
        if arm_disarm:
            if not self.arm_button_pressed:
                self.system_arm_state_at_press = self.system_armed

            rospy.loginfo_throttle(1., "Attempting to %s"%("arm" if not self.system_arm_state_at_press else "disarm"))
            arm_msg = Bool()
            arm_msg.data = not self.system_arm_state_at_press
            self.arm_pub.publish(arm_msg)

            self.arm_button_pressed = True
        else:
            self.arm_button_pressed = False

        # Request State changing
        mode_request_msg = UInt8()
        valid_request = True
        if manual:
            rospy.loginfo_throttle(1., "Requesting manual mode.")
            mode_request_msg.data = MMPUGModes.MANUAL_MODE
        elif joystick:
            rospy.loginfo_throttle(1., "Requesting joystick mode.")
            mode_request_msg.data = MMPUGModes.JOYSTICK_MODE
        elif exploration:
            rospy.loginfo_throttle(1., "Requesting exploration mode.")
            mode_request_msg.data = MMPUGModes.EXPLORATION_MODE
        elif waypoint:
            rospy.loginfo_throttle(1., "Requesting waypoint mode.")
            mode_request_msg.data = MMPUGModes.WAYPOINT_MODE
        else:
            valid_request = False
        if valid_request:
            self.state_pub.publish(mode_request_msg)

if __name__ == "__main__":
    rospy.init_node("joystick_command_source")
    node = JoystickCommandSource()
    node.run()
